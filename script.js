const key='{"alg":"A256GCM","ext":true,"k":"rjjOQEyU0oQzxibm7SZfLrgdD1WDI997yFsyaVpUCro","key_ops":["encrypt","decrypt"],"kty":"oct"}',codeSnippets=['print("Hello, World!")','def greet(name):\n    return f"Hello, {name}!"',"for i in range(10):\n    print(i)",'if x > 0:\n    print("Positive")\nelse:\n    print("Non-positive")','class Person:\n    def __init__(self, name):\n        self.name = name\n    \n    def speak(self):\n        print(f"My name is {self.name}")',"with open('file.txt', 'r') as file:\n        data = file.read()",'try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print("Cannot divide by zero")','import math\n\nradius = 5\narea = math.pi * radius ** 2\nprint(f"Area: {area}")',"list_numbers = [1, 2, 3, 4, 5]\nsquared = [x ** 2 for x in list_numbers]\nprint(squared)","def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)","while True:\n    user_input = input(\"Enter 'exit' to quit: \")\n    if user_input == 'exit':\n        break","import os\n\nif os.path.exists('somefile.txt'):\n    os.remove('somefile.txt')","def is_even(n):\n        return n % 2 == 0","try:\n        with open('data.json') as f:\n            data = json.load(f)\n    except FileNotFoundError:\n        data = {}","lambda x: x * 2","from collections import Counter\n\ncounter = Counter(['a', 'b', 'a', 'c', 'b', 'b'])\nprint(counter)",'def nested_function():\n        def inner():\n            print("Inner function")\n        inner()',"my_dict = {\n        'name': 'Alice',\n        'age': 30,\n        'city': 'New York'\n    }",'import datetime\n\nnow = datetime.datetime.now()\nprint(now.strftime("%Y-%m-%d %H:%M:%S"))',"try:\n        file = open('example.txt', 'w')\n        file.write(\"Sample text\")\n    finally:\n        file.close()","def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a",'@decorator\ndef say_hello():\n    print("Hello!")','import sys\n\nif len(sys.argv) > 1:\n    print("Arguments:", sys.argv[1:])',"def recursive_sum(n):\n        if n == 0:\n            return 0\n        else:\n            return n + recursive_sum(n - 1)",'try:\n        value = int(input("Enter a number: "))\n    except ValueError:\n        print("Invalid input")','import random\n\ndice_roll = random.randint(1, 6)\nprint(f"Dice rolled: {dice_roll}")',"def merge_dicts(a, b):\n        return {**a, **b}","# List comprehension with condition\nevens = [x for x in range(20) if x % 2 == 0]",'def slow_function():\n        import time\n        time.sleep(2)\n        print("Done sleeping")','if __name__ == "__main__":\n    main()','# Multi-line string\ntext = """\nThis is a\nmulti-line string\nin Python.\n"""',"# Using enumerate\nfor index, value in enumerate(['a', 'b', 'c']):\n    print(index, value)","# Set example\nunique_numbers = {1, 2, 3, 2, 1}","# Dictionary with comprehension\nsquares = {x: x ** 2 for x in range(5)}","# Function with default argument\ndef power(base, exponent=2):\n    return base ** exponent"],targetCounts=5e3;let counts=0,timeLeft=1200;function generateCode(){const e=codeSnippets.length,n=Math.floor(Math.random()*e),t=codeSnippets[n],r=document.querySelector("#code");r.textContent=r.textContent+"\n"+t,r.parentElement.scrollTop=r.parentElement.scrollHeight,Prism.highlightAll(),counts++;const i=Math.floor(counts/5e3*100),o=document.getElementById("progress");o.style.width=`${i}%`,o.textContent=`${i}%`,counts>=5e3&&startSecondStage()}function startSecondStage(){let e=!1;document.querySelector(".stage-1").classList.add("d-none"),document.querySelector(".stage-2").classList.remove("d-none"),setInterval((()=>{if(e)return;timeLeft<=0&&(e=!0,startThirdStage());const n=document.querySelector(".timer"),t=Math.floor(timeLeft/60).toString().padStart(2,"0"),r=(timeLeft%60).toString().padStart(2,"0");n.textContent=`${t}:${r}`,timeLeft--}),1e3)}function startThirdStage(){document.querySelector(".stage-2").classList.add("d-none"),document.querySelector(".stage-3").classList.remove("d-none")}async function importKeyJWK(e){e=JSON.parse(e);return await crypto.subtle.importKey("jwk",e,{name:"AES-GCM"},!0,["encrypt","decrypt"])}async function exportKeyJWK(e){return await crypto.subtle.exportKey("jwk",e)}async function generateKey(){return await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async function encryptData(e,n){const t=(new TextEncoder).encode(n),r=crypto.getRandomValues(new Uint8Array(12)),i=await crypto.subtle.encrypt({name:"AES-GCM",iv:r},e,t);return{iv:Array.from(r),ciphertext:Array.from(new Uint8Array(i))}}async function decryptData(e,n){const t=JSON.parse(atob(n)),r=t.iv,i=t.ciphertext,o=new Uint8Array(r),a=new Uint8Array(i),s=await crypto.subtle.decrypt({name:"AES-GCM",iv:o},e,a);return(new TextDecoder).decode(s)}document.getElementById("hack-button").addEventListener("click",generateCode),document.querySelector("#secret-code").addEventListener("input",(async e=>{if(counts<5e3)return void alert("you're cheating");const n=document.querySelector("#secret-code").value;importKeyJWK(key).then((e=>decryptData(e,n))).then(alert).catch((e=>console.log(e)))}));
